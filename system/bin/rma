#!/system/bin/sh
# Zyarexx @ Telegram
ID="RMA"
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
write() {
    if [[ ! -f "$1" ]]; then
        return 1
    fi
    local curval=$(cat "$1" 2>/dev/null)
    if [[ "$curval" == "$2" ]]; then
        return 1
    fi
    chmod +w "$1" 2>/dev/null
    if ! printf "%s\n" "$2" > "$1" 2>/dev/null; then
        return 0
    fi
}
LOG=/storage/emulated/0/RMA/Ram-Mode-AI.log
nolimits() {
	echo -e "$(date +"%d-%m-%Y %r" ) $@" >>$LOG
}
nolimits1() {
	echo -e "$@" >>$LOG
}
if [[ -e $LOG ]]; then
	rm $LOG
fi
if [[ -d "/storage/emulated/0/RMA" ]]; then
	touch Ram-Mode-AI.log
else
    mkdir /storage/emulated/0/RMA
	mkdir /storage/emulated/0/RMA
	touch Ram-Mode-AI.log
fi
touch /storage/emulated/0/RMA/AITime.txt
echo 600 > /storage/emulated/0/RMA/AITime.txt
nolimits1 ""
nolimits1 " 𝓢𝓽𝓪𝓻𝓽𝓲𝓷𝓰 𝓡𝓪𝓶 𝓜𝓸𝓭𝓮 𝓐𝓘 "
sleep 2.5
nolimits1 ""
nolimits1 " 𝓡𝓪𝓶 𝓜𝓸𝓭𝓮 𝓐𝓘 𝓢𝓽𝓪𝓻𝓽𝓮𝓭 𝓢𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂"
nolimits ""
nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"

while true; do
	ram_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
	ram_usage=${ram_usage%.*}
battery_level=$(dumpsys battery | grep level | awk '{print $2}')
threshold=1024
	if [ "$ram_usage" -ge 70 ] && [ "$battery_level" -gt 20 ]; then
		TIME=$(cat /storage/emulated/0/RMA/AITime.txt)
		nolimits1 ""
		sync
		nolimits1 " 𝓒𝓵𝓮𝓪𝓷𝓲𝓷𝓰 𝓒𝓪𝓬𝓱𝓮 "
		echo 3 >/proc/sys/vm/drop_caches
		sleep 1
		nolimits1 ""
		nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
		nolimits1 ""
		nolimits1 " 𝓒𝓵𝓮𝓪𝓷𝓲𝓷𝓰 𝓙𝓾𝓷𝓴 𝓽𝓸 𝓲𝓶𝓹𝓻𝓸𝓿𝓮 𝓟𝓮𝓻𝓯 "
		sleep 0.5
		nolimits1 ""
		nolimits1 " 𝓓𝓲𝓼𝓪𝓫𝓵𝓲𝓷𝓰 𝓟𝓒𝓢𝔂𝓷𝓬 "
		if [ "$(getprop persist.service.pcsync.enable)" != "0" ]; then
			setprop persist.service.pcsync.enable 0 &>/dev/null
			nolimits1 " 𝓟𝓒𝓢𝔂𝓷𝓬 𝓭𝓲𝓼𝓪𝓫𝓵𝓮𝓭 𝓼𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂!"
		else
			nolimits1 " 𝓟𝓒𝓢𝔂𝓷𝓬 𝓲𝓼 𝓪𝓵𝓻𝓮𝓪𝓭𝔂 𝓭𝓲𝓼𝓪𝓫𝓵𝓮𝓭 "
		fi
		nolimits1 ""
		if [ "$(getprop ro.HOME_APP_ADJ)" != "1" ]; then
			setprop ro.HOME_APP_ADJ 1 &>/dev/null
			nolimits1 " • 𝓗𝓸𝓶𝓮 𝓪𝓹𝓹 𝓹𝓻𝓸𝓬𝓮𝓼𝓼 𝓹𝓻𝓲𝓸𝓻𝓲𝓽𝔂 𝓼𝓮𝓽 𝓼𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂!"
		else
			nolimits1 " • 𝓗𝓸𝓶𝓮 𝓪𝓹𝓹 𝓹𝓻𝓸𝓬𝓮𝓼𝓼 𝓪𝓵𝓻𝓮𝓪𝓭𝔂 𝓱𝓪𝓼 𝓽𝓱𝓮 𝓹𝓮𝓻𝓯𝓮𝓬𝓽 𝓹𝓻𝓲𝓸𝓻𝓲𝓽𝔂, 𝓷𝓸 𝓬𝓱𝓪𝓷𝓰𝓮 𝓷𝓮𝓮𝓭𝓮𝓭"
		fi
		nolimits1 ""
		sleep 1
		if [ "$(getprop persist.sys.purgeable_assets)" != "1" ]; then
			setprop persist.sys.purgeable_assets 0 &>/dev/null
			nolimits1 " • 𝓔𝓷𝓪𝓫𝓵𝓮𝓭 𝓼𝔂𝓼𝓽𝓮𝓶 𝓽𝓸 𝓭𝓮𝓵𝓮𝓽𝓮 𝓟𝓾𝓻𝓰𝓮𝓪𝓫𝓵𝓮 𝓪𝓼𝓼𝓮𝓽𝓼 𝔀𝓱𝓮𝓷 𝓵𝓸𝔀 𝓸𝓷 𝓶𝓮𝓶𝓸𝓻𝔂!"
		else
			nolimits1 " • 𝓟𝓾𝓻𝓰𝓮𝓪𝓫𝓵𝓮 𝓪𝓼𝓼𝓮𝓽𝓼 𝓪𝓵𝓻𝓮𝓪𝓭𝔂 𝓮𝓷𝓪𝓫𝓵𝓮𝓭, 𝓷𝓸 𝓬𝓱𝓪𝓷𝓰𝓮 𝓷𝓮𝓮𝓭𝓮𝓭"
		fi
		nolimits1 ""
        nolimits1 " • 𝓒𝓱𝓮𝓬𝓴𝓲𝓷𝓰 - 𝓛𝓸𝓰𝓰𝓲𝓷𝓰, 𝓽𝓻𝓪𝓬𝓮, 𝓭𝓾𝓶𝓫 𝓭𝓮𝓫𝓾𝓰𝓼 𝓪𝓷𝓭 𝓼𝓸𝓶𝓮 𝓸𝓽𝓱𝓮𝓻𝓼.."
        nolimits1 " • 𝓢𝓮𝓪𝓻𝓬𝓱𝓲𝓷𝓰 𝓯𝓸𝓻 𝓾𝓼𝓮𝓵𝓮𝓼𝓼 𝓼𝓽𝓾𝓯𝓯 𝓲𝓷 𝓑𝓪𝓬𝓴𝓰𝓻𝓸𝓾𝓷𝓭 & 𝓓𝓲𝓼𝓪𝓫𝓵𝓲𝓷𝓰 𝓽𝓱𝓮𝓶 𝓲𝓯 𝓷𝓮𝓬𝓮𝓼𝓼𝓪𝓻𝔂"
		if [ "$(getprop debug.als.logs)" != "0" ]; then
			setprop debug.als.logs 0 &>/dev/null
		fi
        sleep 0.5
		if [ "$(getprop debug.svi.logs)" != "0" ]; then
			setprop debug.svi.logs 0 &>/dev/null
		fi
        if [ "$(getprop debug.mdpcomp.logs)" != "0" ]; then
			setprop debug.mdpcomp.logs 0 &>/dev/null
		fi
        if [ "$(getprop ro.logd.size)" != "0" ]; then
			setprop ro.logd.size 0 &>/dev/null
		fi
        if [ "$(getprop ro.logd.size.stats)" != "0" ]; then
			setprop ro.logd.size.stats 0 &>/dev/null
		fi
        if [ "$(getprop log.tag.stats_log)" != "0" ]; then
			setprop log.tag.stats_log 0 &>/dev/null
		fi
        if [ "$(getprop logd.logpersistd.enable)" != "false" ]; then
			setprop logd.logpersistd.enable false &>/dev/null
		fi
        if [ "$(getprop persist.vendor.verbose_logging_enabled)" != "false" ]; then
			setprop persist.vendor.verbose_logging_enabled false &>/dev/null
		fi
        if [ "$(getprop debug.atrace.tags.enableflags)" != "0" ]; then
			setprop debug.atrace.tags.enableflags 0 &>/dev/null
		fi
        if [ "$(getprop persist.traced.enable)" != "0" ]; then
			setprop persist.traced.enable 0 &>/dev/null
		fi
        if [ "$(getprop logd.statistics)" != "0" ]; then
			setprop logd.statistics 0 &>/dev/null
		fi
        if [ "$(getprop sys.log.app)" != "0" ]; then
			setprop sys.log.app 0 &>/dev/null
		fi
        if [ "$(getprop debug.atrace.tags.enableflags)" != "0" ]; then
			setprop debug.atrace.tags.enableflags 0 &>/dev/null
		fi
        nolimits1 ""
        if [ "$(getprop persist.sample.eyetracking.log)" != "0" ]; then
			setprop persist.sample.eyetracking.log 0 &>/dev/null
		fi
        if [ "$(getprop persist.sys.loglevel)" != "0" ]; then
			setprop persist.sys.loglevel 0 &>/dev/null
		fi        
        if [ "$(getprop logcat.live)" != "disable" ]; then
			setprop logcat.live disable &>/dev/null
		fi
        if [ "$(getprop debugtool.anrhistory)" != "0" ]; then
			setprop debugtool.anrhistory 0 &>/dev/null
		fi
        if [ "$(getprop persist.debug.trace)" != "0" ]; then
			setprop persist.debug.trace 0 &>/dev/null
		fi
        if [ "$(getprop profiler.hung.dumpdobugreport)" != "false" ]; then
			setprop profiler.hung.dumpdobugreport false &>/dev/null
		fi
        sleep 1
        nolimits1 " • 𝓢𝓽𝓸𝓹𝓹𝓲𝓷𝓰 𝓽𝓻𝓪𝓬𝓮𝓭 𝓭𝓪𝓮𝓶𝓸𝓷 𝓽𝓸 𝓯𝓻𝓮𝓮 𝓾𝓹 𝓼𝔂𝓼𝓽𝓮𝓶 𝓻𝓮𝓼𝓸𝓾𝓻𝓬𝓮𝓼"
        stop traced &>/dev/null
        nolimits1 ""
        nolimits1 " • 𝓢𝓽𝓸𝓹𝓹𝓲𝓷𝓰 𝓵𝓸𝓰 𝓭𝓪𝓮𝓶𝓸𝓷 𝓽𝓸 𝓯𝓻𝓮𝓮 𝓾𝓹 𝓼𝔂𝓼𝓽𝓮𝓶 𝓻𝓮𝓼𝓸𝓾𝓻𝓬𝓮𝓼"
		stop logd &>/dev/null
		sleep 0.5
		nolimits1 ""
		nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
		nolimits1 ""

		nolimits1 " • 𝓚𝓲𝓵𝓵𝓲𝓷𝓰 𝓘𝓭𝓵𝓮 & 𝓸𝓽𝓱𝓮𝓻 𝓟𝓻𝓸𝓬𝓮𝓼𝓼𝓮𝓼"
		killall -qw idle
		killall -qw svc
        nolimits1 ""
        sleep 1
		nolimits1 " • 𝓘𝓭𝓮𝓷𝓽𝓲𝓯𝔂𝓲𝓷𝓰 𝓪𝓷𝓭 𝓴𝓲𝓵𝓵𝓲𝓷𝓰 𝓾𝓷𝓷𝓮𝓬𝓮𝓼𝓼𝓪𝓻𝔂 𝓢𝓮𝓻𝓿𝓲𝓬𝓮𝓼 𝓽𝓱𝓪𝓽 𝓪𝓻𝓮 𝓻𝓾𝓷𝓷𝓲𝓷𝓰 𝓲𝓷 𝓽𝓱𝓮 𝓫𝓪𝓬𝓴𝓰𝓻𝓸𝓾𝓷𝓭 (𝓝𝓞𝓣 𝓐𝓟𝓟𝓢)"
		nolimits1 ""
		nolimits1 " • 𝓚𝓲𝓵𝓵𝓲𝓷𝓰 𝓾𝓷𝓷𝓮𝓬𝓮𝓼𝓼𝓪𝓻𝔂 𝓼𝓮𝓻𝓿𝓲𝓬𝓮𝓼..."
		for service in $(ls /system/etc/init | grep "\.rc"); do
			if grep -q "service" "/system/etc/init/$service"; then
				sed -i "s/service /#service /g" "/system/etc/init/$service"
			fi
		done
		nolimits1 ""
		nolimits1 " • 𝓤𝓷𝓷𝓮𝓬𝓮𝓼𝓼𝓪𝓻𝔂 𝓼𝓮𝓻𝓿𝓲𝓬𝓮𝓼 𝓚𝓲𝓵𝓵𝓮𝓭 𝓼𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂!"
        nolimits1 ""
		nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
		nolimits1 ""
		nolimits1 " • 𝓒𝓱𝓮𝓬𝓴𝓲𝓷𝓰 𝓲𝓯 𝓛𝓸𝔀 𝓜𝓮𝓶𝓸𝓻𝔂 𝓚𝓲𝓵𝓵𝓮𝓻 𝓲𝓼 𝓼𝓾𝓹𝓹𝓸𝓻𝓽𝓮𝓭 𝓸𝓷 𝓾𝓻 𝓓𝓮𝓿𝓲𝓬𝓮 !"
		if test -e /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk; then
        nolimits1 ""
        if [ "$(cat /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk)" != "1" ]; then
        echo 1 > /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk
        nolimits1 " • 𝓛𝓜𝓚 𝓕𝓸𝓾𝓷𝓭 !"
        nolimits1 ""
        nolimits1 " • 𝓔𝓷𝓪𝓫𝓵𝓲𝓷𝓰 𝓵𝓸𝔀 𝓶𝓮𝓶𝓸𝓻𝔂 𝓴𝓲𝓵𝓵𝓮𝓻 𝓲𝓯 𝓲𝓽'𝓼 𝓭𝓲𝓼𝓪𝓫𝓵𝓮𝓭"
        nolimits1 ""
        nolimits1 " • 𝓔𝓷𝓪𝓫𝓵𝓮𝓭 𝓛𝓸𝔀 𝓜𝓮𝓶𝓸𝓻𝔂 𝓚𝓲𝓵𝓵𝓮𝓻 𝓢𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂 !"
        nolimits1 ""
        else
        nolimits1 " • 𝓛𝓸𝔀 𝓜𝓮𝓶𝓸𝓻𝔂 𝓚𝓲𝓵𝓵𝓮𝓻 𝓐𝓵𝓻𝓮𝓪𝓭𝔂 𝓔𝓷𝓪𝓫𝓵𝓮𝓭 ! 𝓢𝓴𝓲𝓹𝓹𝓲𝓷𝓰..."
        nolimits1 ""
        fi
        else
        nolimits1 " • 𝓛𝓸𝔀 𝓜𝓮𝓶𝓸𝓻𝔂 𝓚𝓲𝓵𝓵𝓮𝓻 𝓲𝓼 𝓷𝓸𝓽 𝓼𝓾𝓹𝓹𝓸𝓻𝓽𝓮𝓭 𝓲𝓷 𝔂𝓸𝓾𝓻 𝓓𝓮𝓿𝓲𝓬𝓮 ! 𝓢𝓴𝓲𝓹𝓹𝓲𝓷𝓰..."
        fi
        nolimits1 ""
        nolimits1 " • 𝓛𝓸𝔀 𝓜𝓮𝓶𝓸𝓻𝔂 𝓚𝓲𝓵𝓵𝓮𝓻, 𝓲𝓼 𝓪 𝓚𝓮𝓻𝓷𝓮𝓵 𝓯𝓮𝓪𝓽𝓾𝓻𝓮 𝓽𝓱𝓪𝓽 𝓴𝓲𝓵𝓵𝓼 𝓹𝓻𝓸𝓬𝓮𝓼𝓼𝓮𝓼 𝔀𝓱𝓮𝓷 𝓽𝓱𝓮 𝓼𝔂𝓼𝓽𝓮𝓶 𝓲𝓼 𝓻𝓾𝓷𝓷𝓲𝓷𝓰 𝓵𝓸𝔀 𝓸𝓷 𝓶𝓮𝓶𝓸𝓻𝔂. 𝓔𝓷𝓪𝓫𝓵𝓲𝓷𝓰 𝓽𝓱𝓮 𝓵𝓸𝔀 𝓶𝓮𝓶𝓸𝓻𝔂 𝓴𝓲𝓵𝓵𝓮𝓻 𝓬𝓪𝓷 𝓱𝓮𝓵𝓹 𝓽𝓸 𝓯𝓻𝓮𝓮 𝓾𝓹 𝓡𝓐𝓜 𝔀𝓱𝓮𝓷 𝓲𝓽 𝓲𝓼 𝓷𝓮𝓮𝓭𝓮𝓭."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • 𝓒𝓱𝓮𝓬𝓴𝓲𝓷𝓰 𝓲𝓯 𝓓𝓮𝓫𝓾𝓰𝓰𝓲𝓷𝓰 𝓲𝓼 𝓽𝓾𝓻𝓷𝓮𝓭 𝓸𝓯𝓯"
        if [ "$(getprop debug.enable)" != "0" ]; then
        setprop debug.enable 0 &>/dev/null
        nolimits1 " • 𝓓𝓮𝓫𝓾𝓰𝓰𝓲𝓷𝓰 𝓽𝓾𝓻𝓷𝓮𝓭 𝓸𝓯𝓯 𝓼𝓾𝓬𝓬𝓮𝓼𝓼𝓯𝓾𝓵𝓵𝔂 !"
        nolimits1 ""
        else
        nolimits1 " • 𝓓𝓮𝓫𝓾𝓰𝓰𝓲𝓷𝓰 𝓪𝓵𝓻𝓮𝓪𝓭𝔂 𝓭𝓲𝓼𝓪𝓫𝓵𝓮𝓭 ! 𝓢𝓴𝓲𝓹𝓹𝓲𝓷𝓰..."
        nolimits1 ""
        fi
        nolimits1 " • 𝓣𝓾𝓻𝓷𝓲𝓷𝓰 𝓸𝓯𝓯 𝓭𝓮𝓫𝓾𝓰𝓰𝓲𝓷𝓰 𝓬𝓪𝓷 𝓱𝓮𝓵𝓹 𝓽𝓸 𝓻𝓮𝓭𝓾𝓬𝓮 𝓽𝓱𝓮 𝓪𝓶𝓸𝓾𝓷𝓽 𝓸𝓯 𝓡𝓐𝓜 𝓽𝓱𝓪𝓽 𝓲𝓼 𝓾𝓼𝓮𝓭 𝓫𝔂 𝓵𝓸𝓰𝓬𝓪𝓽 𝓪𝓷𝓭 𝓸𝓽𝓱𝓮𝓻 𝓭𝓮𝓫𝓾𝓰𝓰𝓲𝓷𝓰 𝓹𝓻𝓸𝓬𝓮𝓼𝓼𝓮𝓼."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • 𝓒𝓱𝓮𝓬𝓴𝓲𝓷𝓰 𝓯𝓸𝓻 𝓢𝔀𝓪𝓹𝓹𝓲𝓷𝓮𝓼𝓼 .."
		if test -e /proc/sys/vm/swappiness; then
        nolimits1 ""
        if [ "$(cat /proc/sys/vm/swappiness)" != "50" ]; then
        echo 50 > /proc/sys/vm/swappiness
        nolimits1 " • Swappiness Found !"
        nolimits1 ""
        nolimits1 " • Adjusted swappiness !"
        nolimits1 ""
        else
        nolimits1 " • Swappiness already has the Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " • Swappiness Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • Swappiness determines how aggressively the kernel swaps memory pages to and from the swap space. A lower swappiness value can help to reduce the amount of RAM that is used by the kernel."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Adjusting dirty ratio and dirty background ratio.."
        nolimits1 ""
        if [ "$(cat /proc/sys/vm/dirty_ratio)" != "50" ]; then
        echo 50 > /proc/sys/vm/dirty_ratio
        echo 10 > /proc/sys/vm/dirty_background_ratio
        nolimits1 " • Dirty ratio and dirty background ratio adjusted successfully !"
        nolimits1 ""
        else
        nolimits1 " • Ratio already has the Perfect parameter ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • The dirty ratio and dirty background ratio values, which determine how many pages the kernel writes to disk before starting to write to swap. Lowering these values can help to reduce the amount of RAM that is used by the kernel."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking for Minfree Availability.."
        nolimits1 ""
		if test -e /sys/module/lowmemorykiller/parameters/minfree; then
		nolimits1 " • Adjusting minfree values"
		nolimits1 ""
		echo "8192,12288,16384,20480,24576,28672,32768" >/sys/module/lowmemorykiller/parameters/minfree
		nolimits1 " • Minfree adjusted successfully!"
		nolimits1 ""
		else
		nolimits1 " • Minfree not supported ! Skipping..."
		nolimits1 ""
		fi
		nolimits1 " • The minfree value, which determines the amount of free memory that the kernel tries to maintain. A higher minfree value can help to reduce the amount of RAM that is used by the kernel."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking for zcache availability .."
		if test -e /sys/module/zcache/parameters/max_pool_percent; then
        nolimits1 ""
        if [ "$(cat /sys/module/zcache/parameters/max_pool_percent)" != "50" ]; then
        echo 50 > /sys/module/zcache/parameters/max_pool_percent
        nolimits1 " • Zcache Avaiable !"
        nolimits1 ""
        nolimits1 " • Adjusted Zcache max pool !"
        nolimits1 ""
        else
        nolimits1 " • Max Pool already has the Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " • Zcache Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • The zcache max pool ratio, which determines the maximum amount of RAM that can be used by the zcache compression feature. A lower zcache max pool ratio can help to reduce the amount of RAM that is used by zcache."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking for Zswap availability..."
        nolimits1 ""
		if test -e sys/module/zswap/parameters/max_pool_percent; then
        nolimits1 ""
        if [ "$(cat sys/module/zswap/parameters/max_pool_percent)" != "50" ]; then
        echo 50 > sys/module/zswap/parameters/max_pool_percent
        nolimits1 " • Zswap Found !"
        nolimits1 ""
        nolimits1 " • Adjusting zswap.."
        nolimits1 ""
        nolimits1 " • Zswap max pool adjusted successfully !"
        nolimits1 ""
        else
        nolimits1 " • Max pool ratio already has the Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " •  Zswap Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • The ZSwap max pool ratio, which determines the maximum amount of RAM that can be used by the zswap compression feature. A lower zswap max pool ratio can help to reduce the amount of RAM that is used by zswap."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking for ZRAM Max pool ratio availability !"
		if test -e /sys/block/zram0/max_comp_streams; then
        nolimits1 ""
        if [ "$(cat /sys/block/zram0/max_comp_streams)" != "50" ]; then
        echo 50 > /sys/block/zram0/max_comp_streams
        nolimits1 " • ZRAM max pool Found !"
        nolimits1 ""
        nolimits1 " • Adjusting zram max pool ratio"
        nolimits1 ""
        nolimits1 " • Zram max pool ratio adjusted successfully !"
        nolimits1 ""
        else
        nolimits1 " • ZRAM Max pool already has Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " • ZRAM Max pool Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • ZRAM max pool ratio, which determines the maximum amount of RAM that can be used by the zram compression feature. A lower zram max pool ratio can help to reduce the amount of RAM that is used by zram."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Flushing caches once again !"
		sync
		echo 3 >/proc/sys/vm/drop_caches
		nolimits1 " • Caches flushed successfully!"
        nolimits1 ""
        nolimits1 " • Flush the system's page caches, dentries, and inodes. Flushing these caches can help to free up RAM that is being used by the kernel."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking for vm min free availability !"
		if test -e /proc/sys/vm/min_free_kbytes; then
        nolimits1 ""
        if [ "$(cat /proc/sys/vm/min_free_kbytes)" != "8192" ]; then
        echo 8192 > /proc/sys/vm/min_free_kbytes
        nolimits1 " • vm min free Found !"
        nolimits1 ""
        nolimits1 " • Adjusting min_free_kbytes"
        nolimits1 ""
        nolimits1 " • vm Min free adjusted successfully !"
        nolimits1 ""
        else
        nolimits1 " • vm Min free already has the Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " • vm min free Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • The min_free_kbytes value, which determines the minimum amount of free RAM that the kernel tries to maintain. A higher min_free_kbytes value can help to reduce the amount of RAM that is used by the kernel."
        nolimits1 ""
        nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
        nolimits1 ""
        nolimits1 " • Checking overcommit availability !"
		if test -e /proc/sys/vm/overcommit_ratio; then
        nolimits1 ""
        if [ "$(cat /proc/sys/vm/overcommit_ratio)" != "50" ]; then
        echo 50 > /proc/sys/vm/overcommit_ratio
        nolimits1 " • overcommit Found !"
        nolimits1 ""
        nolimits1 " • Adjusting overcommit..."
        nolimits1 ""
        nolimits1 " • Overcommit adjusted successfully !"
        nolimits1 ""
        else
        nolimits1 " • Overcommit already has the Perfect Parameter ! Skipping..."
        nolimits1 ""
        fi
        else
        nolimits1 " • Overcommit Not supported ! Skipping..."
        nolimits1 ""
        fi
        nolimits1 " • The overcommit ratio, which determines the kernel's tendency to overcommit memory. A lower overcommit ratio can help to reduce the amount of RAM that is used by the kernel."
        nolimits1 ""
		nolimits1 "┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅"
		nolimits1 ""
		nolimits1 " • 𝓓𝓪𝓮𝓶𝓸𝓷 𝓻𝓾𝓷 𝔀𝓲𝓽𝓱𝓸𝓾𝓽 𝓲𝓼𝓼𝓾𝓮𝓼 𝓸𝓷 .. $(date +"%d-%m-%Y %r" )"
		nolimits1 " • Rechecking in $TIME Seconds "
		sleep 0.5
		nolimits1 ""
		nolimits1 ""
		nolimits1 " • 𝓣𝓱𝓪𝓷𝓴𝓼 𝓕𝓸𝓻 𝓤𝓼𝓮, 𝓗𝓪𝓿𝓮 𝓐 𝓖𝓸𝓸𝓭 𝓓𝓪𝔂"
		sleep $TIME
	else
	nolimits1 " • 𝓔𝓷𝓸𝓾𝓰𝓱 𝓡𝓐𝓜 𝓒𝓪𝓹𝓪𝓬𝓲𝓽𝔂 𝓐𝓿𝓪𝓲𝓪𝓫𝓵𝓮 ! 𝓢𝓴𝓲𝓹𝓹𝓲𝓷𝓰 𝓟𝓻𝓸𝓬𝓮𝓼𝓼 ..."
	nolimits1 " • 𝓡𝓮𝓬𝓱𝓮𝓬𝓴 𝓲𝓷 $TIME"
	nolimits1 ""
	fi
done
